def test_with_real_data(csv_path):
    """
    Test components with real CSV data
    """
    # Get data from CSV
    test_df = prepare_test_data_from_csv(csv_path)
    
    print("\n1. Testing memory reduction with real data:")
    test_df = reduce_mem_usage(test_df)
    
    print("\n2. Testing filtering with real data:")
    # Get unique ENODEB prefixes for testing
    if len(test_df) > 0:
        enodeb_samples = test_df['ENODEB'].astype(str).str[:3].unique()[:2]
        if len(enodeb_samples) > 0:
            mkt_filter = list(enodeb_samples)
            print(f"Using market filters: {mkt_filter}")
            
            filter_condition = None
            for filter_item in mkt_filter:
                if filter_condition is None:
                    filter_condition = test_df.ENODEB.str.startswith(filter_item)
                else:
                    filter_condition |= test_df.ENODEB.str.startswith(filter_item)
            
            filtered_df = test_df[filter_condition]
            print(f"Filtered from {len(test_df)} to {len(filtered_df)} rows")
    
    print("\n3. Testing vectorized cell_id creation with real data:")
    if 'VENDOR' in test_df.columns:
        vendor_sample = test_df['VENDOR'].iloc[0] if not test_df.empty else 'Ericsson'
        mask_vendor = test_df.VENDOR == vendor_sample
        test_df.loc[mask_vendor, 'cell_id'] = (
            test_df.loc[mask_vendor, 'SECTOR/CARRIERNAME'].astype(str) + "_" + 
            test_df.loc[mask_vendor, 'ENODEB'].astype(str)
        )
        print(f"Created cell_id for {mask_vendor.sum()} rows with VENDOR={vendor_sample}")
        if mask_vendor.sum() > 0:
            print("Sample cell_id values:")
            print(test_df.loc[mask_vendor, 'cell_id'].head())
    
    return test_df
